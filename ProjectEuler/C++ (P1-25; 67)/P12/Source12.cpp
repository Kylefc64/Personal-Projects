/*
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/
#include <iostream>
#include <time.h>

using namespace std;

long long numFactors(long long);
long long triNum(long long);

int main()
{
	clock_t tStart = clock(); //
	int index = 2;
	long long factors = numFactors(triNum(index));
	while (factors <= 500)
	{
		index++;
		factors = numFactors(triNum(index));
	}
	cout << triNum(index) << endl;

	printf("Time taken: %.2fs\n", (double)(clock() - tStart) / CLOCKS_PER_SEC); //
	return 0;
}
/*Answer: 76576500*/

long long numFactors(long long num) //num cannot be 0 or 1
{
	long long numF = 2;
	long long divisor = 2;
	long long denominator = 2;
	while (divisor < num / denominator)
	{
		if (num % divisor == 0)
		{
			numF+=2;
			denominator = divisor;
		}
		divisor++;
	}
	return numF;
	/*long long numF = 1;
	long long divisor = 1;
	while (divisor <= num/2)
	{
		if (num%divisor == 0)
		{
			numF++;
		}
		divisor++;
	}
	return numF;*/
}
long long triNum(long long index) //index cannot be 0
{
	long long sum = 0;
	while (index > 0)
	{
		sum += index;
		index--;
	}
	return sum;
	/*if (index == 1)
	{
		return 1;
	}
	return triNum(index - 1) + index;*/
}